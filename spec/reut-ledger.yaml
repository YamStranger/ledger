swagger: "2.0"
info:
  title: reut-ledger api
  description: This rest service allows keep track of transactions between accounts
  version: 0.1.9
host: "127.0.0.1:8081"
schemes:
  - "http"
paths:
  /account/create:
    post:
      summary: "Creates new account"
      description: "Creates new account and returns id"
      consumes:
        - "text/plain;charset=UTF-8"
      produces:
        - "text/plain;charset=UTF-8"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccountCreatedConfirmationResponse"
  /transaction/{transactionId}:
    get:
      summary: "Returns transaction by id"
      description: "Returns transaction by id, if it was registered correctly"
      produces:
        - "application/json"
      parameters:
        - name: "transactionId"
          in: "path"
          description: "Transaction id that should be searched."
          required: true
          type: "string"
          format: uuid
          default: '00000000-0000-0000-1111-000000000001'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TransactionResponse"
        400:
          description: "Invalid transaction id provided"
          schema:
            $ref: "#/definitions/BadParameterResponse"
        404:
          description: "Transaction not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /transaction:
    post:
      summary: "Adds new transaction that transfers money from one account to other"
      description: "By default only one account exists 00000000-0000-0000-0001-000000000001. If we try send money from this account
      to other account like 00000000-0000-0000-0000-000000000002 - second account will be created. Virtually 00000000-0000-0000-0001-000000000001
      has unlimited money amount"
      consumes:
        - "text/plain;charset=UTF-8"
      produces:
        - "text/plain;charset=UTF-8"
      parameters:
        - in: "body"
          name: "body"
          description: "Transaction that should be created"
          required: true
          schema:
            $ref: "#/definitions/CreateTransactionRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TransactionConfirmationResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/BadParameterResponse"
  /account/{accountId}/transactions:
    get:
      summary: "List all registered transactions for this account"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "accountId"
          in: "path"
          description: "Account id to return transactions for."
          required: true
          type: "string"
          format: uuid
          default: '00000000-0000-0000-0001-000000000001'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ListTransactionsResponse"
        400:
          description: "Invalid account id provided"
          schema:
            $ref: "#/definitions/BadParameterResponse"
        404:
          description: "Account not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /account/{accountId}/balance:
    get:
      summary: "Return balance of account"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "accountId"
          in: "path"
          description: "Account id to return balance for."
          required: true
          type: "string"
          format: uuid
          default: '00000000-0000-0000-0001-000000000001'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AccountBalanceResponse"
        400:
          description: "Invalid transaction id provided"
          schema:
            $ref: "#/definitions/BadParameterResponse"
        404:
          description: "Account not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /wrong/path:
    get:
      summary: "Returns 404 because this path does not exists"
      description: "Returns 404 because this path does not exists"
      produces:
        - "application/json"
      responses:
        404:
          description: "Path not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
definitions:
  AccountBalanceResponse:
    type: object
    properties:
      requestId:
        type: string
        format: uuid
        example: 00000000-1111-1111-1111-000000000001
      body:
        $ref: "#/definitions/AccountBalance"
  AccountBalance:
    type: object
    properties:
      accountId:
        type: string
        format: uuid
        example: 00000000-0000-0000-1111-000000000001
      balances:
        type: object
        properties:
          GBP:
            type: integer
            format: int64
            example: 1000
          EUR:
            type: integer
            format: int64
            example: 1000
  ListTransactionsResponse:
    type: object
    properties:
      requestId:
        type: string
        format: uuid
        example: 00000000-1111-1111-1111-000000000001
      transactions:
        type: "array"
        items:
          $ref: "#/definitions/Transaction"
  TransactionResponse:
    type: object
    properties:
      requestId:
        type: string
        format: uuid
        example: 00000000-1111-1111-1111-000000000001
      body:
        $ref: "#/definitions/Transaction"
  Transaction:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: 00000000-0000-0000-1111-000000000001
      from:
        type: string
        format: uuid
        example: 00000000-0000-0000-0001-000000000001
      to:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000002
      currency:
        type: string
        example: GBP
      amount:
        type: integer
        format: int64
        example: 1000
      createdAt:
        type: integer
        format: int64
        example: 1567171637
  CreateTransactionRequest:
    type: object
    properties:
      from:
        type: string
        example: 00000000-0000-0000-0001-000000000001
        description: account id
      to:
        type: string
        example: 00000000-0000-0000-0000-000000000002
        description: account id
      currency:
        type: string
        example: GBP
        description: only GBP supported now
      amount:
        type: integer
        format: int64
        example: 1000
  TransactionConfirmationResponse:
    type: object
    properties:
      requestId:
        type: string
        format: uuid
        example: 00000000-1111-1111-1111-000000000001
      body:
        $ref: "#/definitions/TransactionConfirmation"
  TransactionConfirmation:
    type: object
    properties:
      transactionId:
        type: string
        format: uuid
        example: 00000000-0000-0000-1111-000000000001
  AccountCreatedConfirmationResponse:
    type: object
    properties:
      requestId:
        type: string
        format: uuid
        example: 00000000-1111-1111-1111-000000000001
      body:
        $ref: "#/definitions/AccountCreatedConfirmation"
  AccountCreatedConfirmation:
    type: object
    properties:
      accountId:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000002
  NotFoundResponse:
    type: object
    properties:
      requestId:
        type: string
        format: uuid
        example: 00000000-1111-1111-1111-000000000001
      body:
        $ref: "#/definitions/NotFoundErrorObject"
  NotFoundErrorObject:
    type: object
    properties:
      errorCode:
        type: integer
        format: int64
        example: 1
      errorDetails:
        type: string
        example: Account does not exists
        description: Some error description
  BadParameterResponse:
    type: object
    properties:
      requestId:
        type: string
        format: uuid
        example: 00000000-1111-1111-1111-000000000001
      body:
        $ref: "#/definitions/BadParameterErrorObject"
  BadParameterErrorObject:
    type: object
    properties:
      errorCode:
        type: integer
        format: int64
        example: 2
      errorDetails:
        type: string
        example: Some parameter is wrong
        description: Some error description
